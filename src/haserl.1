.\" Process with groff -man -Tascii haserl.1
.TH haserl 1 "October 2010"
.SH NAME
haserl \- A CGI scripting program for embedded environments
.SH SYNOPSIS
.BI "#!/usr/bin/haserl [\-\-upload\-dir=" dirspec "] [\-\-upload\-limit=" limit "]"

.SH DESCRIPTION
Haserl is a small CGI wrapper that uses Lua as the programming language. It is
very small, so it can be used in embedded environments, or where something like
PHP is too big.

.SH OPTIONS

.TP
\fB\-U\fR, \fB\-\-upload\-dir=\fIdirspec\fR
Defaults to "/tmp". All uploaded files are created with temporary filename in
this directory
.B FORM.xxx_path
contains the name of the temporary file.
.B FORM.xxx_filename
contains the original name of the file, as specified by the client.

.TP
\fB\-u\fR, \fB\-\-upload\-limit=\fIlimit\fR
Allow a mime-encoded file up to
.I limit KB
to be uploaded. The default is
.I 0KB
(no uploads allowed).
Note that mime-encoding adds 33% to the size of the data.

.SH OVERVIEW OF OPERATION

In general, the web server sets up several environment variables, and then uses
.I fork
or another method to run the CGI script. If the script uses
.IR haserl ,
the following happens:

.IP
If
.I haserl
is run as root, then the uid/gid is set to the owner/group of the script.

The provided cookie and GET/POST data is parsed. Form-elements are placed as
name=value pairs into the Lua environment for the CGI script to use.

The Lua script is executed.

.SH CLIENT SIDE INPUT
.I haserl
will decode data sent via the
.I HTTP_COOKIE
environment variable, and the GET or POST method from the client, and store them
as elements in tables that can be accessed by the executed Lua script. The name
of the variable corresponds to the name of the method.

For cookies, elements are stored in the
.I COOKIE
variable. For example, if
.I HTTP_COOKIE
includes "foo=bar", then:
.B COOKIE.foo
== "bar".

For the GET method, data sent in the form %xx is translated into the characters
they represent, and elements are stored in the
.I GET
variable. For example, if
.I QUERY_STRING
includes "foo=bar", then:
.B GET.foo
== "bar" .

For the POST method, elements are stored in the
.I POST
variable. For example, if the post stream includes "foo=bar", then:
.B POST.foo
== "bar" .

Also, for the POST method, if the data is sent using
.I "multipart/form\-data"
encoding, the data is automatically decoded. This is typically used when files
are uploaded from a web client using <input type=file>.

.TP
.B NOTE
When a file is uploaded to the web server, it is stored in the
.I upload-dir
directory.
.B FORM.variable_filename
contains the name of the file uploaded (as specified by the client).
.B FORM.variable_path
contains the name of the file in
.I upload-dir
that holds the uploaded content. To prevent malicious clients from filling up
.I upload-dir
on your web server, file uploads are only allowed when the
.I \-\-upload\-limit
option is used to specify how large a file can be uploaded. Haserl automatically
deletes the temporary file when the script is finished. To keep the file, move
it or rename it somewhere in the script.

.P
When multiple instances of the same variable are sent via the same method, only
the last one is saved.

.SH EXAMPLES
.TP
.B WARNING
The examples below are simplified to show how to use
.IR haserl .
You should be familiar with basic web scripting security before using
.I haserl
(or any scripting language) in a production environment.

.TP
.B Looping with dynamic output
.nf
#!/usr/bin/haserl
io.write("Content-type: text/html\\r\\n\\r\\n")

io.write("<html><body><table border=1><tr>")
for i, v in ipairs({"Red", "Blue", "Yellow", "Cyan"}) do
	io.write(string.format("<td bgcolor='%s'>%s</td>", v, v))
end
io.write("</tr></table></body></html>")
.fi

Sends a mime-type "text/html" document to the client, with a table
containing elements labeled with each respective background color.

.TP
.B Self Referencing CGI with a form
.nf
#!/usr/bin/haserl
io.write("Content-Type: text/html\\r\\n\\r\\n")

io.write("<html><body>")
io.write("<h1>Sample Form</h1>")
io.write(string.format("<form action='%s' method='GET'>", os.getenv("SCRIPT_NAME")))

-- Do some basic validation of POST.textfield
-- To prevent common web attacks
io.write(string.format("<input type=text name=textfield Value='%s' cols=20>",
         POST.textfield:gsub("[^%w ]", ""):gsub("%l+", string.upper)))
io.write("<input type=submit value=GO>")

io.write("</form>")
io.write("</body></html>")
.fi

Prints a form. If the client enters text in the form, the CGI is reloaded
(defined by the
.IR SCRIPT_NAME
environment variable) and the textfield is sanitized to prevent web attacks,
then the form is redisplayed with the text the user entered. The text is
uppercased.

.TP
.B Uploading a File
.nf
#!/usr/bin/haserl \-\-upload\-limit=4096 \-\-upload\-dir=/tmp
io.write("Content-Type: text/html\\r\\n\\r\\n")

io.write("<html><body>")
io.write(string.format("<form action='%s' method=POST enctype='multipart/form-data'>", os.getenv("SCRIPT_NAME")))
io.write("<input type=file name=uploadfile>")
io.write("<input type=submit value=GO>")
io.write("<br>")
if FORM.uploadfile_path then
	io.write(string.format("<p>You uploaded a file named <b>%s</b>, and it was", FORM.uploadfile_filename))
	io.write(string.format("temporarily stored on the server as <i>%s</i>.", FORM.uploadfile_path))
	local file = io.open(FORM.uploadfile_path, "r")
	if file then
		local size = file:seek("end")
		file:close()
		io.write(string.format("The file was %d bytes long.</p>", size))
		os.remove(FORM.uploadfile_path)
		io.write("<p>Don't worry, the file has just been deleted from the web server.</p>")
	end
else
	io.write("You haven't uploaded a file yet.")
end
io.write("</form>")
io.write("</body></html>")
.fi

Displays a form that allows for file uploading. This is accomplished by using the
.B \-\-upload\-limit
and by setting the form
.I enctype
.RI "to " multipart/form\-data.
If the client sends a file, then some information regarding the file is printed,
and then deleted. Otherwise, the form states that the client has not uploaded a
file.

.SH SAFETY FEATURES
.TP
.B Privilege Dropping
If run as root (usually due to being installed with suid),
.I haserl
will set its uid/gid to that of the owner/group of the script. This can be used
to have a set of CGI scripts where each has a different privilege level. If the
.I haserl
binary is not run as root, then the CGI scripts will run with the uid/gid of the
web server.

.TP
.B Reject command line parameters given on the URL
If the URL does not contain an unencoded "=", then the CGI spec states the
options are to be used as command-line parameters to the program. For instance,
according to the CGI spec:
.I http://192.168.0.1/test.cgi?\-\-upload\-limit%3d2000&foo%3dbar
.RS
Should set the upload-limit to 2000KB in addition to setting "Foo=bar". To
protect against clients enabling their own uploads,
.I haserl
rejects any command-line options beyond argv[2]. If invoked as a #! script, the
interpreter is argv[0], all command-line options listed in the #! line are
combined into argv[1], and the script name is argv[2].

.SH LUAC

.I luac
can be used to produce a precompiled Lua chunk. All Lua features listed above
are still available.

Here is an example of a trivial script, converted into a luac CGI script:

Given the file test.lua:
.RS
.nf
io.write("Content-Type: text/plain\\r\\n\\r\\n")
io.write("Hello, world!\\r\\n")
.fi
.RE

It can be compiled with luac:
.RS
luac \-o test.luac \-s test.lua
.RE

And then a wrapper script to call it:
.RS
.nf
#!/bin/sh
exec haserl test.luac
.fi
.RE

.SH NAME
The name "haserl" comes from the Bavarian word for "bunny." At first glance it
may be small and cute, but
.I haserl
is more like the bunny from
.IR "Monty Python & The Holy Grail" .
In the words of Tim the Wizard,
.I That's the most foul, cruel & bad-tempered rodent you ever set eyes on!

Haserl can be thought of the CGI equivalent to
.IR netcat .
Both are small, powerful, and have very little in the way of extra features. Like
.IR netcat ", " haserl
attempts to do its job with the least amount of extra "fluff".

.SH AUTHOR
Nathan Angelacos <nangel@users.sourceforge.net>

.SH SEE ALSO

.BR uncgi (http://www.midwinter.com/~koreth/uncgi.html)
.BR cgiwrapper (http://cgiwrapper.sourceforge.net)
